// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model Archives {
  id Int @id @default(autoincrement())
  path String @unique
  images Images[]
}

model Albums {
  id Int @id @default(autoincrement())
  name String
  folderId Int
  images Images[]
}

model Folders {
  id Int @id @default(autoincrement())
  name String
  folderId Int
  children Folders[] @relation("Folders")
  parent Folders? @relation("Folders", fields: [folderId], references: [id])
}

model Images {
  id Int @id @default(autoincrement())
  filename String
  archiveId Int
  albumId Int?
  modificationDate DateTime
  fileSize Int
  uniqueHash String
  // Depends on filesystem-based albums as a concept
  //manualOrder Int?
  archive Archives @relation(fields: [archiveId], references: [id], onDelete: Restrict)
  metadata ImageMetadata?
  info ImageInfo?
  // TODO - This needs to cascade delete
  tags TagsOnImages[]
  album Albums? @relation(fields: [albumId], references: [id], onDelete: Restrict)
}

model ImageRatings {
  imageId Int @id
  rating Int @default(value: 0)
  pickLabelId Int
  pickLabel PickLabelTypes @relation(fields: [pickLabelId], references: [id])
  colorLabelId Int
  colorLabel ColorLabelTypes @relation(fields: [colorLabelId], references: [id])
}

model PickLabelTypes {
  id Int @id @default(autoincrement())
  pickLabel String @unique
  ratings ImageRatings[]
}

model ColorLabelTypes {
  id Int @id @default(autoincrement())
  colorLabel String @unique
  ratings ImageRatings[]
}

// From digiKam 7.5.0
model ImageMetadata {
  imageId Int @id
  make String?
  model String?
  lens String?
  aperture Float?
  focalLength Float?
  focalLength35 Float?
  exposureTime Float?
  exposureProgram Int?
  exposureMode Int?
  sensitivity Int?
  flash Int?
  whiteBalance Int?
  whiteBalanceColorTemperature Int?
  meteringMode Int?
  subjectDistance Float?
  subjectDistanceCategory Int?
  image Images @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

// From digiKam 7.5.0
model ImageInfo {
  imageId Int @id
  creationDate DateTime
  digitizationDate DateTime
  orientation Int
  width Int
  height Int
  // Could technically be a lookup table with JPEG, whatever, whatever
  format String
  colorDepth Int
  colorModel Int
  image Images @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/many-to-many-relations#explicit-many-to-many-relations
model TagsOnImages {
  @@unique([imageId, tagId])
  imageId Int
  tagId Int
  image Images @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag Tags @relation(fields: [tagId], references: [id], onDelete: Restrict)
}

model Tags {
  @@unique([parentId, name])
  id Int @id @default(autoincrement())
  parentId Int?
  name String
  images TagsOnImages[]
  children Tags[] @relation("TagTrees")
  parent Tags? @relation("TagTrees", fields: [parentId], references: [id])
}
